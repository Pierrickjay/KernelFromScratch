---
description:
globs: **/*.c,**/*.h
alwaysApply: false
---
# Bonnes Pratiques C

Bonnes pratiques de développement en C pour améliorer la lisibilité et l'encapsulation. Auto-inclus pour tous les fichiers C.

<rule>
name: c_best_practices
description: Bonnes pratiques de développement en C pour améliorer la lisibilité et l'encapsulation. Auto-inclus pour les fichiers C.
globs: ["**/*.{c,h}"]

filters:
  - type: file_extension
    pattern: "\\.(c|h)$"
  - type: content
    pattern: "(?s)if\\s*\\([^)]+\\)\\s*{[^}]*if\\s*\\([^)]+\\)\\s*{[^}]*if\\s*\\([^)]+\\)\\s*{"

actions:
  - type: suggest
    message: |
      Bonnes pratiques pour le développement en C :

      ## Extraction de fonctions utilitaires

      1. **Fonctions internes (static)** :
         - Utiliser `static` pour les fonctions utilitaires internes
         - Ne PAS les déclarer dans le fichier .h si elles ne sont utilisées que dans un seul fichier
         - Principe d'encapsulation : garder les détails d'implémentation privés

      2. **Valeurs de retour significatives** :
         - Retourner des booléens (0/1) pour indiquer le succès/échec ou la nature de l'opération
         - Exemple : `return 1;` si c'était une touche spéciale, `return 0;` sinon

      3. **Nommage auto-documenté** :
         - Choisir des noms de fonctions qui expliquent clairement leur rôle
         - Le code doit être auto-explicatif par son nommage et sa structure
         - Si le code n'est pas lisible par lui-même, c'est un signe qu'il faut le refactoriser

      ## Philosophie des commentaires

      4. **Commentaires "POURQUOI" vs "QUOI"** :
         - Les commentaires doivent expliquer le **pourquoi**, jamais le **quoi**
         - Si le "quoi" n'est pas évident, c'est que le code manque de lisibilité
         - Solution : refactoriser en fonctions avec des noms explicites
         - Exemple : `handle_special_key()` remplace le commentaire "// Gestion des touches spéciales"

      ## Simplification de la logique

      5. **Séparation des responsabilités** :
         - Extraire les blocs de logique complexe en fonctions dédiées
         - La fonction principale doit rester simple et lisible
         - Chaque fonction doit avoir une responsabilité unique

      6. **Réduction de la complexité cyclomatique** :
         - Éviter les chaînes de if/else if trop longues dans une seule fonction
         - Préférer l'extraction en fonction utilitaire

examples:
  - input: |
      // Mauvais : commentaire qui explique le "quoi"
      void handle_input(queue) {
          // Gestion des touches spéciales
          if (scancode == LSHIFT) {
              // Active le shift gauche
              left_shift = 1;
          }
          // ... plus de logique complexe
      }
    output: |
      // Bon : code auto-documenté
      static int handle_special_key(scancode) {
          if (scancode == LSHIFT) {
              left_shift = 1;
              return 1;
          }
          return 0;
      }

      void handle_input(queue) {
          if (handle_special_key(scancode)) {
              return;
          }
          // ... logique principale
      }

  - input: |
      // Mauvais : fonction utilitaire exposée inutilement
      // Dans .h
      int internal_helper(int param);

      // Dans .c
      int internal_helper(int param) { ... }
    output: |
      // Bon : fonction utilitaire privée
      // Pas de déclaration dans .h

      // Dans .c
      static int internal_helper(int param) { ... }

  - input: |
      // Mauvais : commentaire expliquant le "quoi"
      i++; // Incrémente i

      // Bon : commentaire expliquant le "pourquoi" (si nécessaire)
      i++; // Passe au prochain élément pour éviter la collision
    output: "Les commentaires doivent expliquer le contexte et la raison, pas l'action"

metadata:
  priority: high
  version: 1.0
</rule>
